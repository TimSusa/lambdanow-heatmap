# Task
task.class=com.lambdanow.heatmap.task.Analyse
task.inputs=kafka.points
#task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
#task.checkpoint.system=kafka
# Normally, this would be 3, but we have only one broker.
#task.checkpoint.replication.factor=3

# YARN
job.factory.class=org.apache.samza.job.yarn.YarnJobFactory
job.name=points
yarn.package.path=hdfs://ip-172-31-51-13.ec2.internal:8020/user/ubuntu/lambdanow-heatmap-1.0-SNAPSHOT-dist.tar.gz

schema.registry.remote=true
schema.registry.url=http://ip-172-31-51-226.ec2.internal:8080/1/schemas/
schema.registry.token=fd3117c961

# Serializers
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.avro.class=com.lambdanow.heatmap.serializer.AvroRecordFactory

systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.key.serde=string
systems.kafka.samza.msg.serde=avro
systems.kafka.consumer.zookeeper.connect=ip-172-31-58-114.ec2.internal:2181,ip-172-31-58-115.ec2.internal:2181,ip-172-31-58-116.ec2.internal:2181
systems.kafka.producer.bootstrap.servers=ip-172-31-58-114.ec2.internal:9092,ip-172-31-58-115.ec2.internal:9092,ip-172-31-58-116.ec2.internal:9092
stores.points.factory=org.apache.samza.storage.kv.RocksDbKeyValueStorageEngineFactory
stores.points.changelog=kafka.points-changelog
stores.points.key.serde=string
stores.points.msg.serde=integer

# Normally, we'd leave this alone, but we have only one broker.
#stores.newheatmapchannel2.changelog.replication.factor=1

# Normally, we'd set this much higher, but we want things to look snappy in the demo.
#stores.newheatmapchannel2.write.batch.size=10
#stores.newheatmapchannel2.object.cache.size=10

# Job Coordinator
#job.coordinator.system=kafka
# Normally, this would be 3, but we have only one broker.
#job.coordinator.replication.factor=3