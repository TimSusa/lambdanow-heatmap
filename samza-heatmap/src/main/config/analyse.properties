# Task
task.class=com.lambdanow.heatmap.task.Analyse
task.inputs=kafka.pointss
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.system=kafka
# Normally, this would be 3, but we have only one broker.
task.checkpoint.replication.factor=1

# YARN
job.factory.class=org.apache.samza.job.yarn.YarnJobFactory
job.name=points_processor
yarn.package.path=hdfs://ip-172-31-50-56.ec2.internal:8020/user/ubuntu/lambdanow-heatmap-1.0-SNAPSHOT-dist.tar.gz

schema.registry.remote=true
schema.registry.url=http://ip-172-31-55-46.ec2.internal:8080/1/schemas/
schema.registry.token=6377725215

# Serializers
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
#serializers.registry.avro.class=com.lambdanow.heatmap.serializer.AvroRecordFactory

systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.key.serde=string
systems.kafka.samza.msg.serde=string
systems.kafka.consumer.zookeeper.connect=ip-172-31-50-191.ec2.internal:2181,ip-172-31-50-189.ec2.internal:2181,ip-172-31-50-190.ec2.internal:2181
systems.kafka.producer.bootstrap.servers=ip-172-31-50-191.ec2.internal:9092,ip-172-31-50-189.ec2.internal:9092,ip-172-31-50-190.ec2.internal:9092
stores.points.factory=org.apache.samza.storage.kv.RocksDbKeyValueStorageEngineFactory
stores.points.changelog=kafka.points-changelog
stores.points.key.serde=string
stores.points.msg.serde=string